;; -*- lexical-binding: t -*-

(ert-deftest rustic-test-save-some-buffers ()
  (let* ((buffer1 (get-buffer-create "b1"))
         (buffer2 (get-buffer-create "b2"))
         (string "fn main()      {}")
         (formatted-string "fn main() {}\n")
         (dir (rustic-babel-generate-project t)))
    (let* ((default-directory dir)
           (src (concat dir "/src"))
           (file1 (expand-file-name "main.rs" src))
           (file2 (progn (shell-command-to-string "touch src/test.rs")
                         (expand-file-name "test.rs" src))))
      (with-current-buffer buffer1
        (write-file file1)
        (insert string))
      (with-current-buffer buffer2
        (write-file file2)
        (insert string))
      (let ((buffer-save-without-query t))
        (rustic-save-some-buffers))
      (with-current-buffer buffer1
        (should (string= (buffer-string) formatted-string)))
      (with-current-buffer buffer2
        (should (string= (buffer-string) formatted-string))))
    (kill-buffer buffer1)
    (kill-buffer buffer2)))

(ert-deftest rustic-test-compile ()
  (let* ((dir (rustic-babel-generate-project t)))
    (should-not compilation-directory)
    (should-not compilation-arguments)
    (setq compilation-arguments "cargo fmt")
    (let* ((default-directory dir)
           (proc (rustic-compile)))
      (should (process-live-p proc))
      (while (eq (process-status proc) 'run)
        (sit-for 0.1))
      (should (string= compilation-directory dir))
      (let ((proc (rustic-recompile)))
        (while (eq (process-status proc) 'run)
          (sit-for 0.1)))
      (should (string= compilation-arguments "cargo build"))
      (should (string= compilation-directory dir))))
  (setq compilation-directory nil)
  (setq compilation-arguments nil))

(ert-deftest rustic-test-recompile ()
  (let ((proc (rustic-compile)))
    (while (eq (process-status proc) 'run)
      (sit-for 0.1))
    (should (= 101 (process-exit-status proc))))
  (let* ((dir (rustic-babel-generate-project t))
         (default-directory dir)
         (proc (rustic-compile)))
    (while (eq (process-status proc) 'run)
      (sit-for 0.1))
    (should (= 0 (process-exit-status proc))))
  ;; now don't set default-directory for rustic-recompile
  (let ((proc (rustic-recompile)))
    (while (eq (process-status proc) 'run)
      (sit-for 0.1))
    (should (= 0 (process-exit-status proc)))))
